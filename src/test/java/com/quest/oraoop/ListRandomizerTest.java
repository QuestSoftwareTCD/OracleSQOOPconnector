/**
 *   Copyright 2011 Quest Software, Inc.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

package com.quest.oraoop;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class ListRandomizerTest {

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	private int factorial(int value) {
		
		int result = 1;
		while(value > 1) 
			result *= value--;
		return result;
	}
	
	@Test
	public void testRandomizeList() {
		
		System.out.print(String.format("\t%s - Start...", OraOopUtilities.getCurrentMethodName()));
		
		OraOopGenerics generics = new OraOopGenerics();
		OraOopGenerics.ListRandomizer<Integer> randomizer = generics.new ListRandomizer<Integer>();
		
		try {
			randomizer.randomizeList(null);
			Assert.fail("An IllegalArgumentException should have been thrown.");
		}
		catch(IllegalArgumentException ex) {
			// Okay - this is what we wanted.
		}
		
		List<Integer> list = null;
		
		list = new ArrayList<Integer>();
		randomizer.randomizeList(list);
		Assert.assertSame(0, list.size());
		
		list.add(1);
		randomizer.randomizeList(list);
		Assert.assertSame(1, list.get(0));

		
		/////////////////////////////////////////////////////////////////////////////////
		
		final int LIST_SIZE = 4;	//<- NB: The logic for the histogram in this method only work for a list size <= 10
		final int NUMBER_OF_SAMPLES = 100000;		
		
		int numberOfPossibleCombinations = factorial(LIST_SIZE);
//		int[] histogram = new int[numberOfPossibleCombinations];
		Map<Integer, Integer> histogram = new HashMap<Integer, Integer>(numberOfPossibleCombinations);
		
		
		double combinationFactor = 1.0;
		for(int idx = 0; idx < LIST_SIZE; idx++) 
			combinationFactor *= 1.0 / (idx+1);
		
		double expectPercentageOfTimesListShouldBeInOrder = 100.0 * combinationFactor;
		int actualNumberOfTimesListWasInOrder = 0;
		int actualNumberOfTimesListWasOutOfOrder = 0;
		
		for(int idxSample = 1; idxSample < NUMBER_OF_SAMPLES; idxSample++) {
			
			list.clear();
			for(int idx = 0; idx < LIST_SIZE; idx++) 
				list.add(idx);
			
			randomizer.randomizeList(list);

			int combinationKey = 0;
			for(int idx = 0; idx < list.size(); idx++) 
				combinationKey += list.get(idx) * Math.pow(10, idx); 
			
			Integer combinationTotal = histogram.get(combinationKey);
			if(combinationTotal == null)
				combinationTotal = 0;
			histogram.put(combinationKey, combinationTotal+1);			
			
			boolean listIsOrdered = true;
			for(int idx = 0; idx < LIST_SIZE; idx++) {
				if(list.get(idx) != idx) {
					listIsOrdered = false;
					break;
				}
			}
			if(listIsOrdered)
				actualNumberOfTimesListWasInOrder++;
			else
				actualNumberOfTimesListWasOutOfOrder++;
		}
		
		double actualPercentageOfTimeListWasInOrder = 100.0 * ((double)actualNumberOfTimesListWasInOrder / NUMBER_OF_SAMPLES);
		if(actualPercentageOfTimeListWasInOrder < 0.9 * expectPercentageOfTimesListShouldBeInOrder ||
		   actualPercentageOfTimeListWasInOrder > 1.1 * expectPercentageOfTimesListShouldBeInOrder)
			Assert.fail(String.format("We expected the randomized list to still be in-order about %3.2f%% of the time, but it was actually in-order %3.2f%% of the time."
									,expectPercentageOfTimesListShouldBeInOrder
									,actualPercentageOfTimeListWasInOrder));
//		else
//			System.out.println(String.format("We expected the randomized list to still be in-order about %3.2f%% of the time - and it was: %3.2f%% of the time, over %d samples."
//					,expectPercentageOfTimesListShouldBeInOrder
//					,actualPercentageOfTimeListWasInOrder
//					,NUMBER_OF_SAMPLES));
		
		// Print the histogram of combinations that were generated by the randomizer...
		boolean printHistogram = false;
		if(printHistogram)
			printHistogram(histogram, LIST_SIZE);
		
		System.out.println("Finished");		
	}
	
	private void printHistogram(Map<Integer, Integer> histogram, int listSize) {
		
		int total = 0;
		int keyDisplayLength = listSize + 2;
		
		Iterator<Entry<Integer, Integer>> iterator = histogram.entrySet().iterator();
		while(iterator.hasNext()) 
			total += iterator.next().getValue();

		int expectedTotalForEachKey = (int) Math.round((double)total / histogram.keySet().size());
		
		String[] msg = new String[histogram.keySet().size()];
		int msgIndex = 0;
		iterator = histogram.entrySet().iterator();
		while(iterator.hasNext()) {
			
			Entry<Integer, Integer> entry = iterator.next();
			String key = OraOopUtilities.padLeft(entry.getKey().toString(), listSize).replace(' ', '0')  + "  ";
			
			int actualTotalOfKeyAsPercentageOfExpectedTotal = (int) Math.round(100 * (entry.getValue() / (double)expectedTotalForEachKey)); 
				
			char[] asterisks = new char[actualTotalOfKeyAsPercentageOfExpectedTotal];
			Arrays.fill(asterisks, '*');
			if(asterisks.length >= 100) 
				asterisks[99] = '|';
			else
				asterisks = (OraOopUtilities.padRight(new String(asterisks), 99) + "|").toCharArray();
			
			msg[msgIndex] = key + new String(asterisks);
			msgIndex++;
		}
		Arrays.sort(msg, String.CASE_INSENSITIVE_ORDER);
		
		System.out.println("Histogram of the actual occurrence of each possible combination:");
		System.out.println("(A perfectly uniform distribution of combinations would result in each item having a value of 100%)");
		String ruler1 = OraOopUtilities.padLeft(" ", keyDisplayLength);
		String ruler2 = OraOopUtilities.padLeft(" ", keyDisplayLength);
		for(int idx = 1; idx <= 15; idx++) {
			ruler1 += OraOopUtilities.padLeft(Integer.toString((idx * 10)) + "%", 10);
			ruler2 += OraOopUtilities.padLeft("|", 10);
		}
		System.out.println(ruler1);
		System.out.println(ruler2);
		for(String line : msg)
			System.out.println(line);
	}

}
